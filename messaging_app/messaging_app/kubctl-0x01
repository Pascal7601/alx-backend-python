#!/bin/bash

# This script scales a Kubernetes deployment, verifies the change,
# runs a load test using 'wrk', and monitors resource usage with 'kubectl top'.

# --- ANSI Color Codes ---
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# --- Configuration ---
DEPLOYMENT_NAME="django-app-deployment"
APP_LABEL="app=django-messaging-app"
SERVICE_NAME="django-app-service"
REPLICA_COUNT=3

# --- Step 1: Check for Prerequisites ---
echo -e "${YELLOW}Step 1: Checking for prerequisites (wrk, kubectl)...${NC}"
if ! command -v wrk &> /dev/null; then
    echo -e "${RED}Error: 'wrk' could not be found.${NC}"
    echo "Please install wrk to perform load testing."
    echo "  - On macOS: brew install wrk"
    echo "  - On Debian/Ubuntu: sudo apt-get install wrk"
    exit 1
fi
if ! command -v kubectl &> /dev/null; then
    echo -e "${RED}Error: 'kubectl' could not be found.${NC}"
    echo "Please install kubectl and configure it to connect to your cluster."
    exit 1
fi
echo -e "${GREEN}Prerequisites are satisfied.${NC}\n"

# --- Step 2: Enable Metrics Server ---
echo -e "${YELLOW}Step 2: Ensuring minikube metrics-server is enabled...${NC}"
# The 'kubectl top' command requires the metrics-server addon.
minikube addons enable metrics-server
echo -e "${GREEN}Metrics-server is enabled. It may take a minute to collect data.${NC}\n"
sleep 5 # Give it a moment to start up

# --- Step 3: Scale the Deployment ---
echo -e "${YELLOW}Step 3: Scaling deployment '${DEPLOYMENT_NAME}' to ${REPLICA_COUNT} replicas...${NC}"
kubectl scale deployment "${DEPLOYMENT_NAME}" --replicas=${REPLICA_COUNT}
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Failed to scale the deployment. Is '${DEPLOYMENT_NAME}' running?${NC}"
    exit 1
fi
echo -e "${GREEN}Deployment scaled successfully. Waiting for new pod to be ready...${NC}"
# Wait for the rollout to complete.
kubectl rollout status deployment "${DEPLOYMENT_NAME}"
echo ""

# --- Step 4: Verify the Pods ---
echo -e "${YELLOW}Step 4: Verifying that ${REPLICA_COUNT} pods are running...${NC}"
kubectl get pods -l "${APP_LABEL}"
echo -e "${GREEN}Verification complete.${NC}\n"

# --- Step 5: Perform Load Testing with wrk ---
echo -e "${YELLOW}Step 5: Preparing for load test...${NC}"
# To run 'wrk' from the host, we need an accessible URL for the service.
# 'minikube service' creates a tunnel and provides a URL.
SERVICE_URL=$(minikube service "${SERVICE_NAME}" --url)
if [ $? -ne 0 ] || [ -z "$SERVICE_URL" ]; then
    echo -e "${RED}Error: Could not get URL for service '${SERVICE_NAME}'. Is it running?${NC}"
    exit 1
fi

echo -e "Service is accessible at: ${CYAN}${SERVICE_URL}${NC}"
echo -e "${YELLOW}Starting 20-second load test with 'wrk'...${NC}"
echo -e "(Using 2 threads, 100 connections)"
wrk -t2 -c100 -d20s "${SERVICE_URL}"
echo -e "${GREEN}Load test finished.${NC}\n"

# --- Step 6: Monitor Resource Usage ---
echo -e "${YELLOW}Step 6: Monitoring resource usage post-load test...${NC}"
echo -e "\n${CYAN}--- Node Resource Usage ---${NC}"
kubectl top nodes

echo -e "\n${CYAN}--- Pod Resource Usage (${APP_LABEL}) ---${NC}"
# It can sometimes take a moment for metrics to become available after enabling the server
kubectl top pods -l "${APP_LABEL}" || echo -e "${YELLOW}Metrics for pods are still being gathered. Please try 'kubectl top pods -l ${APP_LABEL}' again in a moment.${NC}"

echo -e "\n${GREEN}Script finished successfully!${NC}"

